// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://LTIdbUser:D1ymf8wyQEGthFR1E9xhCq@localhost:15432/LTIdb"
}

model Recruiter {
  id          Int         @id @default(autoincrement())
  firstName   String      @db.VarChar(100)
  lastName    String      @db.VarChar(100)
  email       String      @unique @db.VarChar(255)
  phone       String?     @db.VarChar(15)
  department  String?     @db.VarChar(100)
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  candidates  Candidate[]
}

model Candidate {
  id              Int              @id @default(autoincrement())
  firstName       String           @db.VarChar(100)
  lastName        String           @db.VarChar(100)
  email           String           @unique @db.VarChar(255)
  phone           String?          @db.VarChar(15)
  address         String?          @db.VarChar(100)
  status          String           @default("new") @db.VarChar(50)
  position        String           @db.VarChar(100)
  recruiter       Recruiter?       @relation(fields: [recruiterId], references: [id])
  recruiterId     Int?
  educations      Education[]
  workExperiences WorkExperience[]
  resumes         Resume[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Education {
  id            Int       @id @default(autoincrement())
  institution   String    @db.VarChar(100)
  title         String    @db.VarChar(250)
  startDate     DateTime
  endDate       DateTime?
  candidateId   Int
  candidate     Candidate @relation(fields: [candidateId], references: [id])
}

model WorkExperience {
  id          Int       @id @default(autoincrement())
  company     String    @db.VarChar(100)
  position    String    @db.VarChar(100)
  description String?   @db.VarChar(200)
  startDate   DateTime
  endDate     DateTime?
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])
}

model Resume {
  id          Int       @id @default(autoincrement())
  filePath    String    @db.VarChar(500)
  fileType    String    @db.VarChar(50)
  uploadDate  DateTime
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])
}